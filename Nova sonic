def lambda_handler(event, context):
    bucket = event['bucket']
    key = event['key']

    if not key.startswith("input/"):
        return {"statusCode": 200, "message": "Non-input path, skipping"}

    # Generate output path
    filename = key.split("/")[-1].replace(".wav", "_response.wav")
    output_key = f"output/{filename}"

    # Read .wav from S3
    obj = s3.get_object(Bucket=bucket, Key=key)
    wav_bytes = obj['Body'].read()

    with wave.open(io.BytesIO(wav_bytes), 'rb') as wav_file:
        assert wav_file.getframerate() == 16000
        assert wav_file.getnchannels() == 1
        assert wav_file.getsampwidth() == 2

    # Invoke Nova Sonic
    response = bedrock.invoke_model(
        modelId="amazon.nova-sonic-v1:0",
        body=wav_bytes,
        contentType="audio/wav",
        accept="audio/wav"
    )

    # Save response to output/
    s3.put_object(Bucket=bucket, Key=output_key, Body=response["body"].read())

    return {"statusCode": 200, "output_key": output_key}
